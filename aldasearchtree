package tree;

public class BinarySearchTreeNode<T extends Comparable<T>> {

  private T data;
	private BinarySearchTreeNode<T> left;
	private BinarySearchTreeNode<T> right;
	
	
	public BinarySearchTreeNode(T data) {
		this.data = data;
	}


	public boolean add(T data) {
		if (data.compareTo(this.data) == 0){
			return false;
		} else if (data.compareTo(this.data) < 0 && left == null ){
			left = new BinarySearchTreeNode<T>(data);
			return true;
		} else if (data.compareTo(this.data) > 0 && right == null){
			right = new BinarySearchTreeNode<T>(data);
			return true;
		}
		return data.compareTo(this.data) < 0 ? left.add(data) : right.add(data);

	}
	
	private BinarySearchTreeNode<T> findMin( BinarySearchTreeNode<T> node ) {
		if (node==null)
			return null;
		else if (node.left==null) 
			return node;
		return findMin(node.left);
	}

	public BinarySearchTreeNode<T> remove(T data) {
		return remove(data, this);
	}
	
	
	private BinarySearchTreeNode<T> remove(T data, BinarySearchTreeNode<T> node) {
		if (node==null) 
			return node;
		
		int comp = data.compareTo(node.data);
		
		if (comp<0) {
			node.left = remove(data, node.left);
		}
		else if (comp>0) 
			node.right = remove(data, node.right);
		
		else if (node.left!=null&&node.right!=null) {
			node.data = remove(data, findMin(node.right)).data;
			node.right = remove(node.data, node.right);
		} else 
			node = (node.left!= null) ? node.left : node.right;
		return node;
		
	}
	
	public boolean contains(T data) {
		return contains(data,this);
	}

	private boolean contains(T data, BinarySearchTreeNode<T> node) {
		if (node==null) {
			return false; 
		}
		
		int comp = data.compareTo(node.data);
		
		if (comp<0) {
			return contains(data, node.left);
		}
		else if (comp>0) {
			return contains(data, node.right);
		}
		else 
			return true;
	}

	public int size() {
		return size(this); 
	}
	
	private int size(BinarySearchTreeNode<T> node) {
		if (node==null)
			return 0;
		return size(node.left)+size(node.right)+1;
	}
	
	public int depth() {
		return depth(this) -1;
	}
	
	private int depth(BinarySearchTreeNode<T> n){
		if(n == null)
			return 0;

	int leftDepth = 0, rightDepth = 0;

	if (n.left != null){
		leftDepth = depth(n.left);
	}
	if(n.right != null){
		rightDepth = depth(n.right);
	}

	return leftDepth > rightDepth ? leftDepth +1 : rightDepth +1;
	}
	
	private String toString(BinarySearchTreeNode<T> n, T minimum){
		return
				((n.left != null) ? toString(n.left, minimum) : "")
				+ ((n.data.compareTo(minimum) == 0) ? "" : ", ")
				+ n.data
				+ ((n.right != null) ? toString(n.right, minimum) : "");

	}

	public String toString() {
		return toString(this, findMin(this).data);


	}


}
